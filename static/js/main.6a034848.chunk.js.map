{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","generated","setGenerated","data","setData","result","setResult","useEffect","className","id","onSubmit","e","preventDefault","document","getElementById","style","display","qr","QRCode","addData","make","innerHTML","createImgTag","generate","name","cols","rows","value","onChange","target","type","onClick","window","print","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNA+IeA,MA3If,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAMWF,mBAAS,IANpB,mBAMNG,EANM,KAMAC,EANA,OAOeJ,mBAAS,IAPxB,mBAONK,EAPM,KAOEC,EAPF,KA0Bb,OAjBAC,qBAAU,WAMRD,EAAUH,KAET,CAACA,IAUF,oCACE,yBAAKK,UAAU,aACb,yBAAKC,GAAG,gBAEPR,GACC,yBAAKO,UAAU,QAMb,2BAAIL,KAINF,GACA,0BACES,SAAU,SAACC,GACTA,EAAEC,iBACFV,GAAa,GACbW,SAASC,eAAe,eAAeC,MAAMC,QAAU,QACvDH,SAASC,eAAe,UAAUC,MAAMC,QAAU,OA7B7C,WACf,IAAIC,EAAKC,IAAO,EAAG,KACnBD,EAAGE,QAAQd,GACXY,EAAGG,OACHP,SAASC,eAAe,eAAeO,UAAYJ,EAAGK,aAAa,EAAG,IA0B5DC,KA6CF,8BACEC,KAAK,OACLf,GAAG,OACHgB,KAAK,KACLC,KAAK,KACLC,MAAOxB,EACPyB,SAAU,SAACjB,GAAD,OAAOP,EAAQO,EAAEkB,OAAOF,UAEpC,yBAAKlB,GAAG,oBACN,4BACEqB,KAAK,QACLC,QAAS,SAACpB,GACRA,EAAEC,iBAKFR,EAAQ,IACRS,SAASC,eAAe,eAAeC,MAAMC,QAAU,SAT3D,UAcA,4BAAQc,KAAK,UAAb,aAKR,yBAAKrB,GAAG,UACN,4BACEsB,QAAS,WACP7B,GAAa,GACbW,SAASC,eAAe,UAAUC,MAAMC,QAAU,SAHtD,QAQA,4BAAQR,UAAU,QAAQuB,QAAS,kBAAMC,OAAOC,UAAhD,YC3HYC,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,SD0HpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6a034848.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport QRCode from \"qrcode-generator\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [generated, setGenerated] = useState(false);\r\n  // const [firstName, setFirstName] = useState(\"\");\r\n  // const [lastName, setLastName] = useState(\"\");\r\n  // const [email, setEmail] = useState(\"\");\r\n  // const [github, setGithub] = useState(\"\");\r\n  const [data, setData] = useState(\"\");\r\n  const [result, setResult] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // setResult(`\r\n    // ${firstName} ${lastName}\r\n    // ${email}\r\n    // https://github.com/${github}\r\n    // `);\r\n    setResult(data);\r\n    // }, [firstName, lastName, email, github]);\r\n  }, [data]);\r\n\r\n  const generate = () => {\r\n    let qr = QRCode(0, \"L\");\r\n    qr.addData(result);\r\n    qr.make();\r\n    document.getElementById(\"placeHolder\").innerHTML = qr.createImgTag(5, 10);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div id=\"placeHolder\"></div>\r\n\r\n        {generated && (\r\n          <div className=\"info\">\r\n            {/* <p>\r\n              {firstName} {lastName}\r\n            </p>\r\n            <p>{email}</p>\r\n            <p>https://github.com/{github}</p> */}\r\n            <p>{data}</p>\r\n          </div>\r\n        )}\r\n\r\n        {!generated && (\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              setGenerated(true);\r\n              document.getElementById(\"placeHolder\").style.display = \"block\";\r\n              document.getElementById(\"bottom\").style.display = \"flex\";\r\n              generate();\r\n            }}\r\n          >\r\n            {/* <div className=\"name\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"firstName\"\r\n                id=\"firstName\"\r\n                maxLength=\"20\"\r\n                placeholder=\"First Name\"\r\n                value={firstName}\r\n                onChange={(e) => setFirstName(e.target.value)}\r\n                required\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                name=\"lastName\"\r\n                id=\"lastName\"\r\n                maxLength=\"20\"\r\n                placeholder=\"Last Name\"\r\n                value={lastName}\r\n                onChange={(e) => setLastName(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              id=\"email\"\r\n              maxLength=\"35\"\r\n              placeholder=\"Email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              required\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              name=\"github\"\r\n              id=\"github\"\r\n              maxLength=\"20\"\r\n              placeholder=\"Github Username\"\r\n              value={github}\r\n              onChange={(e) => setGithub(e.target.value)}\r\n              required\r\n            /> */}\r\n            <textarea\r\n              name=\"data\"\r\n              id=\"data\"\r\n              cols=\"30\"\r\n              rows=\"10\"\r\n              value={data}\r\n              onChange={(e) => setData(e.target.value)}\r\n            ></textarea>\r\n            <div id=\"button-container\">\r\n              <button\r\n                type=\"reset\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  // setFirstName(\"\");\r\n                  // setLastName(\"\");\r\n                  // setEmail(\"\");\r\n                  // setGithub(\"\");\r\n                  setData(\"\");\r\n                  document.getElementById(\"placeHolder\").style.display = \"none\";\r\n                }}\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button type=\"submit\">Create</button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      </div>\r\n      <div id=\"bottom\">\r\n        <button\r\n          onClick={() => {\r\n            setGenerated(false);\r\n            document.getElementById(\"bottom\").style.display = \"none\";\r\n          }}\r\n        >\r\n          Edit\r\n        </button>\r\n        <button className=\"print\" onClick={() => window.print()}>\r\n          Print\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}